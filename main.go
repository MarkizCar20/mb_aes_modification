package main

import (
	"fmt"

	"github.com/chronos-tachyon/gf256"
)

func ConvertStringToMatrix(s string) [4][4]byte {
	var matrix [4][4]byte

	// Convert string to byte slice
	bytes := []byte(s)

	// Fill the matrix
	for i := 0; i < 16 && i < len(bytes); i++ {
		matrix[i/4][i%4] = bytes[i]
	}

	return matrix
}

// PrintMatrix prints the 4x4 matrix in hex format
func PrintMatrix(matrix [4][4]byte) {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			fmt.Printf("%02x ", matrix[i][j])
		}
		fmt.Println()
	}
}

func inverseMatrix(m [4][4]byte) [4][4]byte {
	var result [4][4]byte
	field := gf256.New(gf256.Poly11B)

	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			val, err := field.Inv(m[i][j])
			if err != true {
				fmt.Println("error: ", err)
				continue
			}
			result[i][j] = val
		}
	}

	return result
}

func byteToBits(b byte) [8]byte {
	var bits [8]byte
	for i := 0; i < 8; i++ {
		bits[i] = (b >> (7 - i)) & 1
	}
	return bits
}

func vectorMatrix(m [4][4]byte) [4][4][8]byte {
	var bitMatrix [4][4][8]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			bitMatrix[i][j] = byteToBits(byte(m[i][j]))
		}
	}
	return bitMatrix
}

func MatrixVectorMultiply(matrix [8][8]byte, vector [8]byte) [8]byte {
	var result [8]byte
	for i := 0; i < 8; i++ {
		sum := byte(0)
		for j := 0; j < 8; j++ {
			sum ^= matrix[i][j] & vector[j]
		}
		result[i] = sum
	}
	return result
}

func AddVectors(vec1, vec2 [8]byte) [8]byte {
	var result [8]byte
	for i := 0; i < 8; i++ {
		result[i] = vec1[i] ^ vec2[i]
	}
	return result
}

func processBitMatrix(m [4][4][8]byte) [4][4][8]byte {
	var transformMatrix = [8][8]byte{
		{1, 0, 0, 0, 1, 1, 1, 1},
		{1, 1, 0, 0, 0, 1, 1, 1},
		{1, 1, 1, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 0, 0, 0},
		{0, 1, 1, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 1, 1, 0},
		{0, 0, 0, 1, 1, 1, 1, 1},
	}

	var additionVector = [8]byte{1, 1, 0, 0, 0, 1, 1, 0}

	var resultMatrix [4][4][8]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			intermediate := MatrixVectorMultiply(transformMatrix, m[i][j])
			resultMatrix[i][j] = AddVectors(intermediate, additionVector)
		}
	}

	return resultMatrix
}

// PrintBitMatrix prints the 4x4x8 bit matrix
func PrintBitMatrix(matrix [4][4][8]byte) {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			fmt.Println(matrix[i][j])
		}
		fmt.Println()
	}
}

func BitsToByte(bits [8]byte) byte {
	var b byte
	for i := 0; i < 8; i++ {
		b |= bits[i] << (7 - i)
	}
	return b
}

// BitVectorsToMatrix converts a 4x4x8 bit matrix back to a 4x4 byte matrix
func BitVectorsToMatrix(bitMatrix [4][4][8]byte) [4][4]byte {
	var matrix [4][4]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			matrix[i][j] = BitsToByte(bitMatrix[i][j])
		}
	}
	return matrix
}

// MatrixToString converts a 4x4 byte matrix back to a string
func MatrixToString(matrix [4][4]byte) string {
	var bytes []byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			if matrix[i][j] != 0 {
				bytes = append(bytes, matrix[i][j])
			}
		}
	}
	return string(bytes)
}

// SubtractVectors subtracts two 8x1 vectors
func SubtractVectors(a, b [8]byte) [8]byte {
	var result [8]byte
	for i := 0; i < 8; i++ {
		result[i] = a[i] ^ b[i]
	}
	return result
}

func InverseProcessBitMatrix(bitMatrix [4][4][8]byte) [4][4][8]byte {
	var inverseTransformMatrix = [8][8]byte{
		{0, 0, 1, 0, 0, 1, 0, 1},
		{1, 0, 0, 1, 0, 0, 1, 0},
		{0, 1, 0, 0, 1, 0, 0, 1},
		{1, 0, 1, 0, 0, 1, 0, 0},
		{0, 1, 0, 1, 0, 0, 1, 0},
		{0, 0, 1, 0, 1, 0, 0, 1},
		{1, 0, 0, 1, 0, 1, 0, 0},
		{0, 1, 0, 0, 1, 0, 1, 0},
	}

	var subtractionVector = [8]byte{1, 1, 0, 0, 0, 1, 1, 0}

	var resultMatrix [4][4][8]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			intermediate := SubtractVectors(bitMatrix[i][j], subtractionVector)
			resultMatrix[i][j] = MatrixVectorMultiply(inverseTransformMatrix, intermediate)
		}
	}
	return resultMatrix
}

var sBox = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

// ApplySBox applies the AES S-Box to a byte
func ApplySBox(b byte) byte {
	return sBox[b]
}

// SubstituteMatrixWithSBox substitutes each byte in the matrix using the AES S-Box
func SubstituteMatrixWithSBox(matrix [4][4]byte) [4][4]byte {
	var result [4][4]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			result[i][j] = ApplySBox(matrix[i][j])
		}
	}
	return result
}

var invSBox = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

// ApplyInvSBox applies the AES inverse S-Box to a byte
func ApplyInvSBox(b byte) byte {
	return invSBox[b]
}

// InverseSubstituteMatrixWithSBox substitutes each byte in the matrix using the AES inverse S-Box
func InverseSubstituteMatrixWithSBox(matrix [4][4]byte) [4][4]byte {
	var result [4][4]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			result[i][j] = ApplyInvSBox(matrix[i][j])
		}
	}
	return result
}

func main() {
	startingWord := "Two One Nine Two"
	fmt.Println(startingWord)

	startMatrix := ConvertStringToMatrix(startingWord)
	invMatrix := inverseMatrix(startMatrix)
	bitMatrix := vectorMatrix(invMatrix)
	processedMatrix := processBitMatrix(bitMatrix)
	finalMatrix := BitVectorsToMatrix(processedMatrix)
	finalString := MatrixToString(finalMatrix)
	fmt.Println(finalString)

	//Doing the same with SBox substitution
	sboxMatrix := SubstituteMatrixWithSBox(startMatrix)
	invSboxMatrix := InverseSubstituteMatrixWithSBox(sboxMatrix)
	finalSBoxString := MatrixToString(invSboxMatrix)
	fmt.Println("<-------------------------->")
	fmt.Println("S-Box Substituted Matrix: ")
	PrintMatrix(sboxMatrix)
	fmt.Println("<-------------------------->")
	fmt.Println("The Alternative Solution Matrix: ")
	PrintMatrix(finalMatrix)
	fmt.Println("<-------------------------->")

	matrixAfterChannel := ConvertStringToMatrix(finalString)
	bitMatrixAfterChannel := vectorMatrix(matrixAfterChannel)
	inverseProcessMatrix := InverseProcessBitMatrix(bitMatrixAfterChannel)
	byteMatrix := BitVectorsToMatrix(inverseProcessMatrix)
	finalfinalMatrix := inverseMatrix(byteMatrix)
	finalInverseString := MatrixToString(finalfinalMatrix)
	fmt.Println("Final string after the alternative implementation:")
	fmt.Println(finalInverseString)
	fmt.Println("Final string after Substitution Box: ")
	fmt.Println(finalSBoxString)
}
